####################
# CircleCI configuration reference:
#   https://circleci.com/docs/2.0/configuration-reference
####################
# CircleCI built-in environment variables:
#   https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables
####################


####################
# Templates: see "anchors" in https://learnxinyminutes.com/docs/yaml/
####################

# See available image tags at https://hub.docker.com/r/mozilla/sbt/
sbt_image: &sbt_image mozilla/sbt:8u171_1.1.6

# The ~/.sbt directory holds any sbt or Scala versions requested by previous builds.
# The ~/.ivy2 directory holds Java and Scala dependencies declared in the build.
# Caching these two can significantly reduce sbt startup time.
save_cache_settings: &save_cache_settings
  key: telemetry-streaming-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}
  paths:
    - ~/.ivy2
    - ~/.sbt

prep_cache_settings: &prep_cache_settings
  name: Clean directories to restore
  command: |
    rm -r ~/.ivy2 ~/.sbt

restore_cache_settings: &restore_cache_settings
  keys:
    - telemetry-streaming-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}
    - telemetry-streaming-{{ .Branch }}
    - telemetry-streaming-

common_settings: &common_settings
  docker:
    - image: *sbt_image
  working_directory: /telemetry-streaming

# CircleCI generally only triggers builds on commits to the main repository,
# so PRs coming from branches of the main repo simply reference builds for existing commits
# (CIRCLE_BRANCH=branchname and CIRCLE_PR_NUMBER is unset);
# The only time PRs will trigger a build is when the PR is referencing a fork
# (CIRCLE_BRANCH=pull/XXX and CIRCLE_PR_NUMBER=XXX).
early_return_for_forked_pull_requests: &early_return_for_forked_pull_requests
  name: Early return if this build is from a forked PR
  command: |
    if [ -n "$CIRCLE_PR_NUMBER" ]; then
      echo "Nothing to upload for forked PRs, so marking this step successful"
      circleci step halt
    fi

early_return_for_skip_tests: &early_return_for_skip_tests
  name: Early return if the latest non-merge commit message contains "[skip-tests]"
  command: |
    COMMIT_MESSAGE=$(git log --format=%B --no-merges -n 1)
    if [[ "$COMMIT_MESSAGE" =~ "[skip-tests]" ]]; then
      echo "Skipping tests due to [skip-tests] flag, so marking this step successful"
      circleci step halt
    fi


####################
# Jobs: see https://circleci.com/docs/2.0/jobs-steps/
####################

version: 2
jobs:

  test:
    <<: *common_settings
    docker:
      - image: *sbt_image
      - image: wurstmeister/zookeeper
        name: zookeeper
      - image: wurstmeister/kafka
        environment:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    steps:
      - checkout
      - run: *early_return_for_skip_tests
      - run: *prep_cache_settings
      - restore_cache: *restore_cache_settings
      # - setup_remote_docker
      # - run:
      #     name: Install Docker client
      #     command: |
      #       set -x
      #       VER="17.03.0-ce"
      #       curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
      #       tar -xz -C /tmp -f /tmp/docker-$VER.tgz
      #       mv /tmp/docker/* /usr/bin
      # - run:
      #     name: Install Docker Compose
      #     command: |
      #       curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
      #       chmod +x ~/docker-compose
      #       mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: Scalatest
          command: |
            sbt clean compile test:compile scalastyle test:scalastyle coverage "test -- -l DockerComposeTag" coverageReport
      - run:
          name: Submit code coverage data
          command: |
            bash <(curl -s https://codecov.io/bash)

  # Assemble an uberjar for the deploy step.
  assembly:
    <<: *common_settings
    steps:
      - run: *early_return_for_forked_pull_requests
      - checkout
      - run:
          name: Assembly
          command: |
            sbt assembly
      - save_cache: *save_cache_settings
      - persist_to_workspace:
          root: target
          paths:
            - scala-2.11/telemetry-streaming-assembly-0.1-SNAPSHOT.jar

  # Uses a "workspace" to get access to the assembled uberjar from the previous stage.
  deploy:
    docker:
      - image: *sbt_image
    working_directory: /telemetry-streaming
    steps:
      - run: *early_return_for_forked_pull_requests
      - checkout
      - attach_workspace:
          at: /telemetry-streaming/target
      - run:
          name: Upload
          command: |
            export JAR=target/scala-2.11/telemetry-streaming-assembly-0.1-SNAPSHOT.jar
            curl -sL https://raw.githubusercontent.com/mozilla/telemetry-ci-ops-artifacts/v1.0.0/deploy.sh | bash


####################
# Workflows: see https://circleci.com/docs/2.0/workflows/
####################

workflows:
  version: 2
  build:
    jobs:
      - test
      - assembly
      - deploy:
          requires:
            - test
            - assembly
